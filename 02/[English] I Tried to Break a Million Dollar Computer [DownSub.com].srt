1
00:00:00,210 --> 00:00:01,050
直接把电源扬了？

2
00:00:01,050 --> 00:00:03,433
直接来吧！

3
00:00:05,230 --> 00:00:07,220
卧槽好叼！

4
00:00:07,220 --> 00:00:09,280
整台机器还在运行！

5
00:00:09,280 --> 00:00:14,280
来见见IBM大型机家族的最新成员Z16

6
00:00:14,330 --> 00:00:15,330
没错

7
00:00:15,330 --> 00:00:17,620
大型机不仅还存在

8
00:00:17,620 --> 00:00:20,270
而且还在为高频交易赋能

9
00:00:20,270 --> 00:00:22,650
比如全球银行业以及旅游业

10
00:00:22,650 --> 00:00:30,370
现在，你能得到拥有着256个核心，快到起飞的全新大型机

11
00:00:30,370 --> 00:00:33,010
采用最新的三星7nm工艺

12
00:00:33,010 --> 00:00:36,820
最高能拥有40TB的内存

13
00:00:36,820 --> 00:00:42,310
只有很少一部分人能被邀请到IBM 10万平尺（10000平米）的大型机实验室

14
00:00:42,310 --> 00:00:48,780
所以我们要在短时间内展示尽可能多的内容，今天得抓紧了

15
00:00:48,780 --> 00:01:05,999
恰饭时间

16
00:01:05,999 --> 00:01:08,582
BiBiBiBiBi

17
00:01:21,423 --> 00:01:23,480
如同大型机的名字“Z”

18
00:01:23,480 --> 00:01:26,900
那是零的缩写，比如说零掉线时间

19
00:01:26,900 --> 00:01:30,690
它的目标是7个9的可靠性

20
00:01:30,690 --> 00:01:34,500
换句话说，也就是每年平均只下线3秒

21
00:01:34,500 --> 00:01:39,220
为了达到目标，他们从头开始构建了一个架构来实现这样的弹性伸缩

22
00:01:39,220 --> 00:01:46,900
在这数百个大型机系统中，只有一台将会是下一代的Z16

23
00:01:46,900 --> 00:01:51,600
最后被这个帅爆了的面板装饰好

24
00:01:51,600 --> 00:01:53,230
先忽略这些

25
00:01:53,230 --> 00:01:55,790
我们来了解一下他的内部

26
00:01:55,790 --> 00:02:02,280
先从底部开始。一开始我认为这些又黑又重的管道是冷却管路

27
00:02:02,280 --> 00:02:07,940
但是Z16不支持接入建筑的冷却管道

28
00:02:07,940 --> 00:02:11,360
相反，它选择使用内部冷却系统

29
00:02:11,360 --> 00:02:18,310
每个机架的计算节点使用最底下的水泵以及冷排单元来进行散热

30
00:02:18,310 --> 00:02:24,910
凑近点看，你能看到实际上这里有两个冗余的水泵，以免一个水泵发生故障

31
00:02:24,910 --> 00:02:29,360
这里其实还有一个空的点位，看上去好像还有一个泵没接上

32
00:02:29,360 --> 00:02:35,020
这是因为在验证阶段，他们不知道这些泵是不是能够满足可靠性要求

33
00:02:35,020 --> 00:02:39,330
所以他们直接塞了三个点位以备不时之需

34
00:02:39,330 --> 00:02:41,470
而这些才是真正的电源线

35
00:02:41,470 --> 00:02:43,830
从三英尺远的地方，经过我们脚下过来

36
00:02:43,830 --> 00:02:48,100
这些线缆遍布整个测试场地

37
00:02:48,100 --> 00:02:57,310
在这个配置中，每对线缆可以承载60A的电流，208V的三相电。

38
00:02:57,310 --> 00:02:59,110
电到这里需要被分配

39
00:02:59,110 --> 00:03:00,410
这就是这些单元的功能

40
00:03:00,410 --> 00:03:02,920
每个配电器

41
00:03:02,920 --> 00:03:05,040
或者说是拖线板

42
00:03:05,040 --> 00:03:09,470
需要在紧急断电事件中提供电源

43
00:03:09,470 --> 00:03:15,250
你基本可以认为他是一个拥有起夜级功能的拖线板

44
00:03:15,250 --> 00:03:20,700
因此通过板载的以太网口，工程师能监控电源使用情况

45
00:03:20,700 --> 00:03:25,000
为了维护或者固件升级而关闭特定的插头

46
00:03:25,000 --> 00:03:27,520
你的拖线板能升级固件吗？

47
00:03:27,520 --> 00:03:28,720
不能?

48
00:03:28,720 --> 00:03:29,840
垃圾

49
00:03:29,840 --> 00:03:32,490
接下来这东西真是碉堡了

50
00:03:32,490 --> 00:03:38,750
每个Z16系统能被配置有最高4个计算节点

51
00:03:38,750 --> 00:03:43,970
每个节点又能拥有最高4个全新的Telum芯片

52
00:03:43,970 --> 00:03:45,780
这东西很nb

53
00:03:45,780 --> 00:03:47,180
凑近点看

54
00:03:49,210 --> 00:03:50,493
nb++++

55
00:03:51,487 --> 00:03:53,490
Telum使用了小芯片设计

56
00:03:53,490 --> 00:03:57,190
你能看到两个分开的die

57
00:03:57,190 --> 00:04:04,780
每个插槽拥有16个核心，64条PCI-E通道，同时支持DDR4

58
00:04:04,780 --> 00:04:09,080
看上去还不错，但这只是一小部分

59
00:04:09,080 --> 00:04:12,770
消费级X86 CPU可能会包含一些专用硬件

60
00:04:12,770 --> 00:04:17,019
比如说用于视频编码的

61
00:04:17,019 --> 00:04:21,320
而Telum则搭载了一些特殊的专用硬件

62
00:04:21,320 --> 00:04:31,550
单个die上的8个核心，每个核心都拥有用于加速存储，加解密，以及IBM专有的压缩算法的协处理器

63
00:04:31,550 --> 00:04:35,560
每个die还拥有GZ压缩加速器

64
00:04:35,560 --> 00:04:39,970
以及AI加速器，这是他们宣称的最大的亮点之一

65
00:04:39,970 --> 00:04:41,900
他们把AI加速器添加到die上的原因是

66
00:04:41,900 --> 00:04:44,850
他们的用户，例如金融行业

67
00:04:44,850 --> 00:04:51,310
他们通过复杂的机器学习模型来帮助开展业务，例如诈骗检测等

68
00:04:51,310 --> 00:04:57,900
但是数据科学家关心的是精确度，而不是模型性能的下降

69
00:04:57,900 --> 00:05:05,650
因此他们发现他们虽然有非常好的模型，但是不能把他们应用到每一笔交易上

70
00:05:05,650 --> 00:05:12,550
或者即使他们能应用上，也需要花费多到不能接受的时间来运行

71
00:05:12,550 --> 00:05:19,210
所以如果你的银行签有服务等级协议或者需要保证每笔交易9毫秒的性能指标

72
00:05:19,210 --> 00:05:22,640
没有足够的时间来让你运行诈骗检测模型

73
00:05:22,640 --> 00:05:27,700
他们要不然一律过，要不然就统统拒绝

74
00:05:27,700 --> 00:05:31,393
代价就是客户会从包里翻出第二张银行卡

75
00:05:31,393 --> 00:05:33,750
把买卖的机会送给竞争对手

76
00:05:33,750 --> 00:05:36,270
通过把AI处理器放到die上

77
00:05:36,270 --> 00:05:41,690
使它们能够直接访问CPU缓存中的交易数据

78
00:05:41,690 --> 00:05:44,240
而不是强制它们去内存中访问

79
00:05:44,240 --> 00:05:46,250
和上一代大型机对比

80
00:05:46,250 --> 00:05:50,740
IBM把AI性能提升了20~30倍

81
00:05:50,740 --> 00:05:54,970
并提高了一致性和精准性

82
00:05:54,970 --> 00:05:57,700
片上的缓存也十分特殊

83
00:05:57,700 --> 00:05:59,840
但为了能好好介绍它

84
00:05:59,840 --> 00:06:01,563
我们要放大点看

85
00:06:04,540 --> 00:06:07,770
现在我们看到的是整个计算节点

86
00:06:07,770 --> 00:06:11,250
每个节点包含了4个Telum芯片

87
00:06:11,250 --> 00:06:14,960
实际上这一台现在只安装了三个，我现在已经带好了静电手环

88
00:06:14,960 --> 00:06:16,170
我能装上最后一个的对吧？

89
00:06:16,170 --> 00:06:17,003
- 请便

90
00:06:17,003 --> 00:06:17,880
这个是吗？
- 对

91
00:06:17,880 --> 00:06:20,670
等等，所以你们之前给我的是一个可以工作的芯片吗？

92
00:06:20,670 --> 00:06:23,066
哦这是你们犯下的第一个错误

93
00:06:23,066 --> 00:06:25,760
好吧，那个很nb的安装工具呢？

94
00:06:25,760 --> 00:06:27,370
芜湖~

95
00:06:27,370 --> 00:06:29,250
我之前见过一次安装示例

96
00:06:29,250 --> 00:06:32,550
向你们演示的话应该差不多也许够了

97
00:06:32,550 --> 00:06:35,630
把芯片放到这里面

98
00:06:35,630 --> 00:06:40,230
然后把这个东西对准上面的点

99
00:06:40,230 --> 00:06:42,970
然后就能抓住芯片了对吧？

100
00:06:42,970 --> 00:06:46,423
在软软的东西上面确定这东西不会掉下来

101
00:06:47,450 --> 00:06:50,050
像这样抓紧了

102
00:06:50,050 --> 00:06:52,363
 希望CPU别掉下来

103
00:06:53,198 --> 00:06:56,153
如果他掉在插槽里，这台机器就没了

104
00:06:58,008 --> 00:06:59,104
不会掉下来的对吧？

105
00:06:59,104 --> 00:07:00,127
- 笑

106
00:07:00,127 --> 00:07:05,860
我还算有点小名气，但我现在不想面对摄像师

107
00:07:05,860 --> 00:07:09,103
应该是这样戳进去

108
00:07:10,090 --> 00:07:13,630
戳进去，压一下，锁住

109
00:07:13,630 --> 00:07:17,020
好，解锁，装好了

110
00:07:17,020 --> 00:07:19,763
晃一晃看看装好了没，好了

111
00:07:21,080 --> 00:07:22,710
现在我们已经装到一半了

112
00:07:22,710 --> 00:07:25,270
接下来装冷头

113
00:07:25,270 --> 00:07:27,240
这个东西看上去碉堡了

114
00:07:27,240 --> 00:07:34,690
我之前问过他们这个冷头上面的导热膏是什么材料的

115
00:07:34,690 --> 00:07:40,030
我一开始以为这是某种液金

116
00:07:40,030 --> 00:07:42,830
但液金之前并没有用到过商业产品中

117
00:07:42,830 --> 00:07:45,200
只有PS5用过

118
00:07:45,200 --> 00:07:47,210
但实际上这是固态的金属

119
00:07:47,210 --> 00:07:53,970
这东西是多种材料的混合物，就像印度咖喱一样

120
00:07:53,970 --> 00:08:01,160
你能看到导热膏的尺寸和die的尺寸是一样的

121
00:08:01,160 --> 00:08:06,150
它们完全覆盖了IHS下的发热区域

122
00:08:06,150 --> 00:08:14,523
这些导热膏将会变成一体水和芯片之间的夹层

123
00:08:15,700 --> 00:08:23,620
我把它装上吗？锁上了吗？好像装上了

124
00:08:23,620 --> 00:08:26,090
我的扳手呢

125
00:08:26,090 --> 00:08:27,550
是这个吗？
- 是这个

126
00:08:27,550 --> 00:08:30,470
这东西都是为我和它量身定做的

127
00:08:30,470 --> 00:08:38,129
我好像扭了很多圈了

128
00:08:38,130 --> 00:08:43,120
ok了吗

129
00:08:43,120 --> 00:08:48,890
把那么大的压力压在这个东西上真是令人压力大

130
00:08:48,890 --> 00:08:50,680
我觉得你们应该已经习惯了

131
00:08:50,680 --> 00:08:51,840
这东西挺好的

132
00:08:51,840 --> 00:08:54,540
3D打印的搁板

133
00:08:54,540 --> 00:09:00,040
你知道我装机的时候有多希望有这东西帮忙卡住水管？

134
00:09:00,040 --> 00:09:01,170
我超喜欢这个

135
00:09:01,170 --> 00:09:02,750
但我不喜欢这个螺丝刀

136
00:09:02,750 --> 00:09:06,070
我们之后会推出一款更好的螺丝刀

137
00:09:06,070 --> 00:09:09,680
我们还在为这个螺丝刀努力
lttstore.com

138
00:09:09,680 --> 00:09:12,090
Bloody hell 知道我会说这句话

139
00:09:12,090 --> 00:09:14,460
这东西看上去碉堡了

140
00:09:14,460 --> 00:09:18,270
真是硬件毛片

141
00:09:18,270 --> 00:09:22,380
这四块CPU提供了64核心

142
00:09:22,380 --> 00:09:27,150
以及惊人的256条PCI-E 4.0通道

143
00:09:27,150 --> 00:09:32,310
但你可能注意到它的主板看上去并不寻常

144
00:09:32,310 --> 00:09:34,025
内存插槽呢？

145
00:09:34,025 --> 00:09:35,463
供电模组呢？

146
00:09:36,480 --> 00:09:38,500
我们先回答第二个

147
00:09:38,500 --> 00:09:42,930
这东西叫POL卡，

148
00:09:42,930 --> 00:09:44,870
他们没跟我说过怎么取出这些板子

149
00:09:44,870 --> 00:09:46,710
但应该是这样的

150
00:09:46,710 --> 00:09:50,230
唔~

151
00:09:50,230 --> 00:09:59,490
这东西能把进来的12v降到1v左右的电压

152
00:09:59,490 --> 00:10:02,710
用来给CPU和内存模组供电

153
00:10:02,710 --> 00:10:07,820
最厉害的是每块卡都有14相供电

154
00:10:07,820 --> 00:10:13,800
能够根据需要动态分配

155
00:10:13,800 --> 00:10:16,960
其中两块POL卡其实是完全冗余的

156
00:10:16,960 --> 00:10:19,570
所以说这三块已经足够完成降压任务了

157
00:10:19,570 --> 00:10:26,010
另外两块，包括我拿出来的这一块，除非有别的卡下线，不然它们不会干任何事情

158
00:10:26,010 --> 00:10:30,947
我真的很喜欢这个老IBM logo

159
00:10:31,940 --> 00:10:36,540
总输出不超过660A

160
00:10:36,540 --> 00:10:38,083
好，我很肯定不会超过的

161
00:10:39,360 --> 00:10:41,870
这些卡还有一些小帮手

162
00:10:41,870 --> 00:10:45,800
就像这些

163
00:10:45,800 --> 00:10:49,380
这张卡叫电压调节棒，或者叫VRS

164
00:10:49,380 --> 00:10:51,440
它更小，相数也更少

165
00:10:51,440 --> 00:10:56,577
但它能够给IO卡或者类似的拓展卡提供降压功能

166
00:10:56,577 --> 00:10:59,550
哦还有一个我想给你们看看的东西

167
00:10:59,550 --> 00:11:02,310
是这里的震荡器卡

168
00:11:02,310 --> 00:11:05,700
哦这东西锁在这里了

169
00:11:05,700 --> 00:11:07,760
这张卡在计算节点的前面

170
00:11:07,760 --> 00:11:11,650
我在时间卡的那期视频里详细地讲过其中的细节

171
00:11:11,650 --> 00:11:18,980
它主要的功能是通过一个外部信号，来让一个数据中心里的所有机器，拥有完全相同的时间

172
00:11:18,980 --> 00:11:20,670
来避免浪费时钟周期

173
00:11:20,670 --> 00:11:22,370
同时更加高效地运行

174
00:11:22,370 --> 00:11:23,710
接下来看看内存

175
00:11:23,710 --> 00:11:26,010
真不戳啊

176
00:11:26,010 --> 00:11:29,670
我从来没见过这样的内存模组

177
00:11:29,670 --> 00:11:32,780
至少有三个特殊的点

178
00:11:32,780 --> 00:11:41,513
第一，即使这是DDR4，一些供电部分还是在模组上，就像DDR5

179
00:11:42,639 --> 00:11:45,920
第二个是芯片配置上的不同

180
00:11:45,920 --> 00:11:50,920
每条边上有10个这样的DRAM芯片，一共是40个

181
00:11:52,400 --> 00:12:00,060
似乎不对应任何一种我所见过的ECC纠错布局

182
00:12:00,060 --> 00:12:03,970
原因是纠错功能不在内存模组上完成

183
00:12:03,970 --> 00:12:10,060
每个系统中的内存控制器能访问8个这样的内存模组

184
00:12:10,060 --> 00:12:13,440
ECC功能的实现更像是RAID

185
00:12:13,440 --> 00:12:18,853
校验数据以条带的方式分布在8个不同的模组中

186
00:12:19,720 --> 00:12:22,220
这一切都在内存控制器的级别进行管理

187
00:12:22,220 --> 00:12:24,680
最后，这里有个好东西

188
00:12:24,680 --> 00:12:27,216
这个铜散热器下面的芯片叫什么？我忘了

189
00:12:27,216 --> 00:12:29,190
- 管理器
- 哦！他叫管理器

190
00:12:29,190 --> 00:12:31,040
这是一块专用缓存芯片

191
00:12:31,040 --> 00:12:39,420
虽然它增加了访问延迟，但能让内存控制器访问更多内存

192
00:12:39,420 --> 00:12:45,810
让每个这样的系统能使用10TB的DDR4内存

193
00:12:45,810 --> 00:12:48,760
真是碉堡了

194
00:12:48,760 --> 00:12:50,123
Papra, pa, pa, pa, pa.

195
00:12:51,280 --> 00:12:56,960
现在让我们聊聊为什么需要四个这样的芯片，以便来解释Telum的缓存配置

196
00:12:56,960 --> 00:13:03,170
一般的CPU在核心旁边拥有一个很小，但是超快的L1缓存

197
00:13:03,170 --> 00:13:10,140
接下来是更大但是更慢的L2，以及更加大、更加慢的L3，以此类推还有L4

198
00:13:10,140 --> 00:13:18,930
Telum除了每个核心配备的私有256KB L1缓存

199
00:13:18,930 --> 00:13:22,530
也就是说每个DIE有8个，每个插槽有16个

200
00:13:22,530 --> 00:13:30,470
还有惊人的32MB私有L2缓存，在消费者的标准看来是非常激进的

201
00:13:30,470 --> 00:13:33,520
为了让你能够更清楚地明白这意味着什么

202
00:13:33,520 --> 00:13:35,610
看看这张Die的照片

203
00:13:35,610 --> 00:13:39,880
缓存所占的区域比处理功能所占的面积还要多

204
00:13:39,880 --> 00:13:45,090
使得它完全不需要L3

205
00:13:45,090 --> 00:13:52,460
IBM的工程师也许可以说：“L2缓存太大了，我们不再需要L3了”

206
00:13:52,460 --> 00:13:53,670
听上去很合理吧？

207
00:13:53,670 --> 00:13:54,800
但他们并没有移除L3

208
00:13:54,800 --> 00:14:00,810
相反，当一条信息需要从一个核心的L2缓存中移除

209
00:14:00,810 --> 00:14:09,560
他会先看看别的核心的L2中有没有空余位置，并把那个地方标记为虚拟的L3缓存

210
00:14:09,560 --> 00:14:13,570
这个核心接下来就会去别的核心的缓存中获取数据了

211
00:14:13,570 --> 00:14:18,300
这样做相比访问自己的L2确实增加了延迟

212
00:14:18,300 --> 00:14:21,980
但是这样做实现了共享三缓

213
00:14:21,980 --> 00:14:25,770
而且这样的设计提供给他们无与伦比的灵活性

214
00:14:25,770 --> 00:14:32,120
特别是对于那些需要多种多样硬件配置的云用户

215
00:14:32,120 --> 00:14:38,320
更强大的是，那些被移除到L3的数据还能被转移到芯片之外

216
00:14:38,320 --> 00:14:43,320
转移到这台Z16系统中的另外一颗CPU中

217
00:14:43,560 --> 00:14:54,060
使得单独一颗核心配合同一个节点中其它CPU可以拥有最高2GB的虚拟L4缓存

218
00:14:54,060 --> 00:14:57,443
以及我们能够最高拥有8GB的L4，如果我们......

219
00:15:00,394 --> 00:15:01,433
这是哪里？？

220
00:15:02,550 --> 00:15:05,260
我大概也许可能死了，来到了硬件天堂

221
00:15:05,260 --> 00:15:08,750
我右边的是一台满配的Z16

222
00:15:08,750 --> 00:15:15,890
现在我们可以继续下去，并且更深入地挖掘这台机器

223
00:15:15,890 --> 00:15:19,830
这一台装满了四个计算节点

224
00:15:19,830 --> 00:15:21,360
这边有一台

225
00:15:21,360 --> 00:15:24,420
第二个机架里面还有三台

226
00:15:24,420 --> 00:15:31,110
IBM用这些SMP-9主动线缆来连接它们 IBM

227
00:15:31,230 --> 00:15:33,620
这些线真的很厉害

228
00:15:33,620 --> 00:15:35,800
上面甚至还有散热器

229
00:15:35,800 --> 00:15:40,970
在保护层里面有10+1根光纤，10根传输数据，一根用来冗余

230
00:15:40,970 --> 00:15:44,430
其中的每一根的速率都高达25Gbps

231
00:15:44,430 --> 00:15:48,470
总带宽250Gbps

232
00:15:48,470 --> 00:15:52,320
当然，所有这些线缆都是冗余的

233
00:15:52,320 --> 00:15:55,620
每台计算节点中都有两根互联

234
00:15:55,620 --> 00:16:05,800
得益于这些链接，就像我之前提到的，系统允许不同节点中的CPU共享L2作为虚拟的L4

235
00:16:05,800 --> 00:16:18,843
在某些案例中，通过这些SMP-9线缆获取数据要比直接从自己的DRAM中获取数据还要快

236
00:16:19,930 --> 00:16:21,140
真是疯了

237
00:16:21,140 --> 00:16:23,810
他们刚刚允许我拔出一对连接卡

238
00:16:23,810 --> 00:16:27,210
但我才发现我还没说过这东西的水箱

239
00:16:27,210 --> 00:16:28,900
真是太牛了

240
00:16:28,900 --> 00:16:31,760
想把你的大机注满？没问题

241
00:16:31,760 --> 00:16:36,560
看看这个不锈钢大水箱

242
00:16:36,560 --> 00:16:38,760
太棒了

243
00:16:38,760 --> 00:16:40,191
- 我在04这里

244
00:16:40,191 --> 00:16:41,236
- 04!

245
00:16:41,236 --> 00:16:42,840
- OK!

246
00:16:42,840 --> 00:16:44,723
- 只是些数据中心里会发生的事情

247
00:16:45,560 --> 00:16:46,393
怎么样了？

248
00:16:48,102 --> 00:16:49,892
- 好极了

249
00:16:49,892 --> 00:16:51,270
- 好

250
00:16:51,270 --> 00:16:53,683
看看这些巨大的快拧头

251
00:16:55,120 --> 00:16:56,510
牛逼

252
00:16:56,510 --> 00:16:57,560
你以为这样会出事吗

253
00:16:57,560 --> 00:16:59,010
没事没事

254
00:16:59,010 --> 00:17:01,990
把水管接在一起才会有水流通过

255
00:17:01,990 --> 00:17:03,640
嘿，这灯还是亮着的欸

256
00:17:04,710 --> 00:17:11,000
来让我们把他拉出来......

257
00:17:11,000 --> 00:17:12,710
这是一对连接卡

258
00:17:12,710 --> 00:17:16,910
用的是多模光纤，其中12根光纤里面4根冗余

259
00:17:16,910 --> 00:17:24,540
使用PCI-e给同一个数据中心中的多个Z16系统之间提供短程、高速链接

260
00:17:24,540 --> 00:17:35,980
这样做的目的是根据用户的弹性策略，让整个大型机网络配置为高可用式的，通常这也是政府的强制性要求

261
00:17:35,980 --> 00:17:41,670
这样做之后能允许整个机柜下线，同时在一瞬间完成故障转移，不会有数据丢失

262
00:17:41,670 --> 00:17:45,080
这就是为什么这些连接卡需要直接插到计算节点上

263
00:17:45,080 --> 00:17:49,060
对那些带宽需求量较小的IO设备，他们要依靠这个

264
00:17:49,060 --> 00:17:52,023
你能在这个东西里面装那么多的PCI-e设备

265
00:17:53,220 --> 00:17:56,563
代号“铁杉”让它们听起来比实物更性感

266
00:17:56,563 --> 00:17:58,330
但它们依旧很酷

267
00:17:58,330 --> 00:18:00,840
用这些DAC线缆

268
00:18:00,840 --> 00:18:02,420
呃......

269
00:18:02,420 --> 00:18:03,930
我这里有一个

270
00:18:03,930 --> 00:18:08,410
在它和计算节点之间有PCI-e x16的连接

271
00:18:08,410 --> 00:18:13,767
你还能把他们堆叠到一起，连上一堆IO卡

272
00:18:13,767 --> 00:18:17,400
NVMe 存储, 加密加速器, 网卡

273
00:18:17,400 --> 00:18:19,360
你甚至能在这些东西上面跑Linux

274
00:18:19,360 --> 00:18:24,690
基本上用户想要什么就能插什么

275
00:18:24,690 --> 00:18:33,713
这两台机器之间的PCI-e是通过这个来连接的

276
00:18:34,570 --> 00:18:35,510
真叼

277
00:18:35,510 --> 00:18:41,400
你们可能已经发现了，只有中间两个机柜有计算功能

278
00:18:41,400 --> 00:18:44,000
外侧的都只是IO

279
00:18:44,000 --> 00:18:49,060
实际上右边的这个机柜也完全是IO部分

280
00:18:49,060 --> 00:18:50,120
了不起

281
00:18:50,120 --> 00:18:56,350
其中你能看到的大多数卡基本都是FICON卡(Fibre Connection) 
或者CICSPlex卡(Customer Information Control System)

282
00:18:56,350 --> 00:19:05,880
这两者相互配合，可以用来连接数据中心内的存储机柜
或者连接到异地同步备份

283
00:19:05,880 --> 00:19:11,400
它们可以直连长达10公里的距离，配合延长设备可以达到100公里的长度

284
00:19:11,400 --> 00:19:16,160
我们要进行一个旅的小游来测测看

285
00:19:17,630 --> 00:19:20,058
这可不是用来吹头发的

286
00:19:20,058 --> 00:19:23,513
有台大型机就在我的头上面

287
00:19:27,570 --> 00:19:29,880
欢迎来到配线间

288
00:19:29,880 --> 00:19:34,440
这里有5w个以太网连接

289
00:19:34,440 --> 00:19:39,330
旁边还有20w个IO连接

290
00:19:39,330 --> 00:19:45,320
蓝色的是OM3多模光纤，用来在数据中心内传输PCI-E信号

291
00:19:45,320 --> 00:19:46,730
这根是之前我们看过的那根

292
00:19:46,730 --> 00:19:52,200
这些光纤一般被接入到IBM DS8K 企业级存储

293
00:19:52,200 --> 00:19:55,510
这些基本都是FICON

294
00:19:55,510 --> 00:19:57,030
这些连接超nb

295
00:19:57,030 --> 00:20:02,667
如果一般的光纤丢包了，一般的应对方法是重传一次

296
00:20:02,667 --> 00:20:04,137
我不觉得丢包是什么大问题

297
00:20:04,137 --> 00:20:07,420
"不行！"IBM说不行， "问题大的去了！"

298
00:20:07,420 --> 00:20:13,800
于是FICON链路中的每个适配器上都设置有存储功能

299
00:20:13,800 --> 00:20:19,330
只有整段链路的最后一跳才需要重传

300
00:20:19,330 --> 00:20:24,000
听上去这个方法不管在安全和性能上都有问题

301
00:20:24,000 --> 00:20:25,760
而且听上去很贵

302
00:20:25,760 --> 00:20:30,000
但是呢......

303
00:20:30,000 --> 00:20:35,833
看这个，这个盒子里面有50公里的光纤

304
00:20:36,210 --> 00:20:41,950
与那边那个一样的光纤盒连在一起

305
00:20:41,950 --> 00:20:46,880
就能在真实条件下测试他们的传输能力

306
00:20:46,880 --> 00:20:50,030
看完再来看这边

307
00:20:50,030 --> 00:20:55,030
两个机柜被设置为场景一和场景二

308
00:20:55,300 --> 00:21:03,570
这两台机器能把数百根1310nm光纤的信号合并，并转换到不同的波长

309
00:21:03,570 --> 00:21:13,780
传输几百公里之后再把他们分开，就像棱镜一样

310
00:21:13,780 --> 00:21:15,780
很厉害不是吗？

311
00:21:15,780 --> 00:21:17,890
接下来介绍的是下达操作指令的大脑

312
00:21:17,890 --> 00:21:21,590
这是支持单元，我叫她大型机的老婆

313
00:21:21,590 --> 00:21:26,520
虽然大型机有两个互为备份，我也不知道她比较喜欢哪个

314
00:21:26,520 --> 00:21:30,380
支持单元是系统的管理接口

315
00:21:30,380 --> 00:21:37,170
通过收集这整个机架中的以太网信息，来保证整个系统的一切运行顺利

316
00:21:37,170 --> 00:21:40,360
其中传输的是温度以及可用性信息

317
00:21:40,360 --> 00:21:42,440
会在下线事件发生后及时汇报

318
00:21:42,440 --> 00:21:43,900
最后有个大问题产生

319
00:21:43,900 --> 00:21:45,730
大型机到底能干什么？

320
00:21:45,730 --> 00:21:54,630
IBM大型机对用户的最大吸引力是可靠性，以及对交易的高速处理和精准性

321
00:21:54,630 --> 00:21:57,620
这是它比X86强多了的地方

322
00:21:57,620 --> 00:22:06,210
Z16的目标是改进上一代大型机，而我们之前介绍过设备和机器学习能让新一代Z16更强

323
00:22:06,210 --> 00:22:13,660
这些新的工具能够帮助用户分析，并简化组织中的安全措施和障碍

324
00:22:13,660 --> 00:22:15,260
听起来真不错

325
00:22:15,260 --> 00:22:18,300
你可能在想这东西一套多少钱

326
00:22:18,300 --> 00:22:21,160
其实早就写在标题里了

327
00:22:21,160 --> 00:22:22,980
当然前提是他们没有改价

328
00:22:22,980 --> 00:22:25,010
我先猜测一下价格

329
00:22:25,010 --> 00:22:28,893
一个空机柜的价格大概在25w刀左右

330
00:22:30,550 --> 00:22:35,830
但是每台大型机都是根据订单规格定制的

331
00:22:35,830 --> 00:22:39,717
IBM的人听到了笑了笑说:

332
00:22:39,717 --> 00:22:48,300
”能让所有软硬件都跑起来，我敢说没个100w刀是砍不下来的。“

333
00:22:48,300 --> 00:22:52,070
所以你应该不太想把这东西放到你的地下实验室里面了

334
00:22:52,070 --> 00:22:54,970
但你可能想要吃吃我的饭

