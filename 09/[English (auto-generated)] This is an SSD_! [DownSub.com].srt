1
00:00:00,240 --> 00:00:03,520
这 是一个SSD
this is an SSD

2
00:00:03,520 --> 00:00:07,948
不不不，严格意义上来说这整台服务器是一个完整的SSD
no no seriously this whole thing is a complete SSD

3
00:00:07,972 --> 00:00:13,920
它是为大型数据中心设计的，例如您可能在 meta 上找到的数据中心
and it's designed for massive data centers like what you might find at the likes of meta so

4
00:00:13,920 --> 00:00:18,480
但为什么我从来没有听说过它？PureStorage也很好奇
how come i've never heard of it well pure storage wonders that too and

5
00:00:18,480 --> 00:00:25,180
并且他们赞助了这个视频，让我们参观他们在加州大山里的设施
they've sponsored this video for us to take a tour of their facilities here in sunny mountain view california

6
00:00:25,204 --> 00:00:28,160
深入挖掘，搞清楚这些服务器的是如何工作的
and dig deeper into just how these things work

7
00:00:28,160 --> 00:00:32,399
他们在的时候，也许能让他们解释一下
and maybe while they're at it they can explain a little bit about how

8
00:00:32,399 --> 00:00:37,360
他们是如何让当今 SSD 中所使用的最慢的闪存
they can make the slowest flash used in ssds today run

9
00:00:37,360 --> 00:00:40,960
比去年更好的闪存快了一倍
twice as fast as last year's good stuff

10
00:00:40,960 --> 00:00:42,055
让我们一起来看看吧
let's take a look

11
00:00:42,079 --> 00:00:51,360
duang~duang~duang~duang~duang

12
00:00:51,360 --> 00:00:55,440
首先，PureStorage的拿手好菜在他们的软件里
from the beginning pure storage's secret sauce has been in their approach to

13
00:00:55,440 --> 00:00:58,241
他们有一套专有的解决方案
software while their solution is proprietary

14
00:00:58,265 --> 00:01:02,907
通过这些，他们能够完全控制阵列中的每个 nand 芯片
with it they're able to tightly control each individual nand flash chip in an array

15
00:01:02,931 --> 00:01:06,240
最高能控制整个机架的nand 芯片
potentially the size of a whole rack

16
00:01:06,240 --> 00:01:12,159
但显然在我的能力范围内，我没有办法深入到这样的低级别
but there's no way that i know of to drill down to that level of detail with any

17
00:01:12,159 --> 00:01:17,360
因为普通 SSD 以及企业级 SAS 和 U.2 硬盘都有主控
normal ssd like even enterprise grade sas and u.2 drives have controllers that

18
00:01:17,360 --> 00:01:22,880
它们使驱动器显示为磁盘，你不能直接去访问存储芯片
make the drive show up as disks like you don't get direct access to the chips so

19
00:01:22,880 --> 00:01:24,121
这是怎么回事？
what's up with that

20
00:01:24,145 --> 00:01:30,000
这是一个直接闪存模块或者叫他DFM
this is a direct flash module or DFM for

21
00:01:30,000 --> 00:01:32,479
简而言之，这是一个奇怪的模块
short it's a strange looking module it's

22
00:01:32,479 --> 00:01:35,921
它比我之前见过的任何形式的SSD 的尺寸都要大很多
a lot larger than any ssd form factor i've seen before

23
00:01:35,945 --> 00:01:38,240
还有很多nand 闪存颗粒
and there's a lot of nand flash on there

24
00:01:38,240 --> 00:01:40,727
这一代的存储空间最高可达 48 TB
up to 48 terabytes in the current generation

25
00:01:40,751 --> 00:01:46,640
还有超级电容，确保在意外断电的情况下完成写入
 along with super capacitors to make sure writes complete properly in the case of a sudden power loss

26
00:01:46,640 --> 00:01:48,799
对于一个数据中心SSD 来说，这算是非常标准的配置
pretty standard for data center ssd yes

27
00:01:48,799 --> 00:01:53,248
你也许会认为上面有大量的 DRAM缓存对吧？
but while you'd expect loads of dram cache to make it fast

28
00:01:53,272 --> 00:01:55,740
没有 DRAM！
there's no dram on here

29
00:01:55,764 --> 00:02:00,247
在通常情况下，没有DRAM的设计会使得性能糟糕
 that is a terrible thing for performance under normal circumstances

30
00:02:00,271 --> 00:02:02,405
性能下降的原因是SSD的工作方式。
just because of the way ssds work

31
00:02:02,429 --> 00:02:06,320
当单个nand 芯片忙于对数据执行某些操作时
whenever an individual die is busy performing some action the data

32
00:02:06,320 --> 00:02:09,368
其上的数据是完全无法访问的，你必须等它执行完操作
on it is completely inaccessible and you have to wait

33
00:02:09,392 --> 00:02:13,260
DRAM 缓存收集数据，直到数据足够多时，再延迟写入
DRAM caches collect the data and delay writing it until there's enough of it that

34
00:02:13,284 --> 00:02:16,861
花时间实际再写出来是有意义的
 it actually makes sense to spend the time actually writing it out

35
00:02:16,885 --> 00:02:23,520
因为如果SSD想要写入数据，就得先清空这一个块
because in order for an ssd to write that data any blocks that are totally empty first had to be erased

36
00:02:23,520 --> 00:02:31,200
当Cell中的level从SLC到MLC，再到TLC和QLC，实际执行此操作所需时间
 as you add additional levels of storage to a cell so from single
to multi to  triple to quad the time it takes to actually do this

37
00:02:31,200 --> 00:02:33,455
会以指数倍增长
increases exponentially

38
00:02:33,479 --> 00:02:37,827
如果你记得我们对 Intel早期的无缓存QLC硬盘的测评
and if you remember from our review of intel's  early DRAMless qlc drives

39
00:02:37,851 --> 00:02:40,640
看看它，这速度可能比机械硬盘还慢
 you would know that it can be slower than a hard drive

40
00:02:40,640 --> 00:02:45,634
对于要求迅速响应的应用来说，这可能是灾难性的
 this could be catastrophic for  real-time applications

41
00:02:45,658 --> 00:02:50,480
如果你的无缓存阵列决定进行一些春季大扫除
if your DRAMless array decided that it was time for some spring cleaning

42
00:02:50,480 --> 00:02:53,920
所以PureStorage一拍桌子大喊
so have pure storage just gone completely mad

43
00:02:53,920 --> 00:02:56,640
“你也别想活着！！”
if so well

44
00:02:56,640 --> 00:02:58,959
也许有一种办法能够改善这种情况
there may be a method to their madness

45
00:02:58,959 --> 00:03:03,795
一台刀片服务器能够插入最多四个这样的DFM
up to four of these dfms can slot into a blade like this one

46
00:03:03,819 --> 00:03:09,200
它是一台独立的服务器
which itself is a self-contained server

47
00:03:09,200 --> 00:03:12,000
里面有个Xeon处理器
running a socketed xeon processor

48
00:03:12,000 --> 00:03:13,621
这些是DRAM
there's the dram

49
00:03:13,645 --> 00:03:18,560
没错！这个Xeon 处理器充当了SSD 主控
yes this xeon cpu is  acting as a glorified ssd controller now

50
00:03:18,560 --> 00:03:20,560
当然它也处理一些其他的阵列管理工作
it does other array management stuff too

51
00:03:20,560 --> 00:03:24,959
但我们重点关注存储部分，它实际上运行一个非常底层的接口
but to talk to the storage it actually runs a very low level interface

52
00:03:24,959 --> 00:03:29,280
底层是linux 系统，这个接口能够与每个DFM上的主控交互
bootstrap from linux that talks to a DFM custom controller on each DFM

53
00:03:29,280 --> 00:03:32,480
这些DFM上的主控只完成一项非常简单的任务
these controllers do one very simple task

54
00:03:32,480 --> 00:03:36,159
即提供访问每块闪存芯片的接口
provide an interface to all the flash on the module

55
00:03:36,159 --> 00:03:40,319
它并没有做典型的 SSD主控所能做的事情
it doesn't really do anything that you'd expect from a typical ssd controller all

56
00:03:40,319 --> 00:03:42,480
一切都交给CPU 处理
of that is handled by the cpu

57
00:03:42,480 --> 00:03:45,888
虽然DFM使用了 nvme 协议和U.2 接口
while it does use the nvme protocol and a u.2 connection

58
00:03:45,912 --> 00:03:50,640
但它不会在其他系统中显示为磁盘，因为它根本没有“大脑”
 it won't show up as a disk in any other system simply because  it doesn't have the brain

59
00:03:50,640 --> 00:03:57,920
这让他们可以直接控制在何时、何地、如何存储新数据
 this arrangement lets them directly  control when where and how new data gets stored like

60
00:03:57,920 --> 00:03:59,680
某种程度上有点像苹果芯片
it's kind of like apple silicon in a way

61
00:03:59,680 --> 00:04:03,200
不同点是，他们可以在同一个阵列中使用多个闪存供应商的闪存颗粒
except they can handle multiple vendors of flash in the same array

62
00:04:03,200 --> 00:04:06,187
更重要的是这些DFM不再需要假装是块真正的硬盘了
more importantly there's no pretending to be a hard drive

63
00:04:06,211 --> 00:04:09,760
所以即使块大小可能会因供应商而异
so while block sizes can vary between vendors you're not

64
00:04:09,760 --> 00:04:13,794
你也不必为了写几个字节而填充整整4k多字节
forced to write out a whole four kilobytes each time you need to write a couple of bytes

65
00:04:13,818 --> 00:04:18,079
由于这些刀片服务器了解整个阵列的结构
so because the blade knows what the whole array looks like

66
00:04:18,079 --> 00:04:23,520
频繁更改的数据可以被组合在一起，防止出现被称为“墓碑”的情况
data that's changed very frequently can be grouped together to prevent a situation known as tombstoning

67
00:04:23,520 --> 00:04:27,680
使得已经被删除的数据可以依旧保留在块上，不需要擦除掉，因为删除操作并不划算
where deleted but not erased data can stick around because it's uneconomical to

68
00:04:27,680 --> 00:04:32,639
这意味着这个Cell 实际上再也不会被修改
evict it which means that that cell is effectively never touched again that's

69
00:04:32,639 --> 00:04:34,547
这算是 OP 空间存在的部分原因
partly why over provision space

70
00:04:34,571 --> 00:04:41,468
OP空间指的是原始容量中，保留给系统使用的部分空间，这一部分空间对于SSD的性能有非常重要的影响
which is where a percentage of the raw capacity is reserved for system use is important for ssd performance

71
00:04:41,492 --> 00:04:44,893
PureStorage的解决方法并不需要这部分空间
a workaround that pure storage doesn't really need

72
00:04:44,917 --> 00:04:50,800
简而言之，每一台刀片服务器都是一个带有额外功能的ssd
in a nutshell each of these blades is basically an ssd with extra steps

73
00:04:50,800 --> 00:04:56,479
因此PureStorage能够控制诸如何时何地开始均衡磨损之类的事情
because of that pure storage is able to control things like when and where to start wear leveling

74
00:04:56,479 --> 00:04:58,960
这对 QLC 颗粒非常重要
which is incredibly important to qlc

75
00:04:58,960 --> 00:05:03,501
因为它通常只有不到1000的PE
flash because it's typically only rated for less than a thousand programming
race cycles

76
00:05:03,525 --> 00:05:09,873
所以如无必要，勿增PE
so obviously there's a lot of incentive to never have to cycle a cell if you don't have to

77
00:05:09,897 --> 00:05:13,759
为了减少PE次数，数据会尽可能压缩数据
to help with that data is compressed wherever possible

78
00:05:13,759 --> 00:05:20,240
还有另一部分原因，因为在同一时间，你只能读或者写闪存颗粒
there's another component to this too because you can only ever read or write flash memory not both

79
00:05:20,240 --> 00:05:25,919
通过避免频繁写入或覆盖读密集型的Cell
the more you can avoid writing to frequently read cells or overwriting frequently written data to those cells

80
00:05:25,919 --> 00:05:31,194
你在等待SSD上花的时间就能减少
the less often you're stuck waiting for the ssd to come around and actually spit out the data you need

81
00:05:31,218 --> 00:05:34,720
这对于 qlc 尤其重要，因为
and that's especially important with qlc because of

82
00:05:34,720 --> 00:05:38,499
在QLC 那种类型的闪存上擦除和重写数据需要很长的时间
how long it takes to erase and rewrite data on that
type of flash

83
00:05:38,523 --> 00:05:42,880
在数据库非常大
remember at this kind of scale you're talking databases that are massive enough and

84
00:05:42,880 --> 00:05:49,773
且访问极其频繁的情况下，即使是几十毫秒的延迟也可能导致重大问题
accessed often enough that even a delay of tens of milliseconds could be a major problem

85
00:05:51,360 --> 00:05:54,400
他们当然也考虑过了
and of course they've thought about that too

86
00:05:54,400 --> 00:06:03,600
如果他们在写入周期时使用奇偶校验数据，来重建那些不可访问的数据呢？
what if i told you that in the time it takes for a write cycle to end the inaccessible bits can be rebuilt from parity data

87
00:06:03,600 --> 00:06:06,867
这可不是通过传统SSD可以可以做到的
yeah that's not something you can do with a traditional ssd

88
00:06:06,891 --> 00:06:12,552
传统固态硬盘的主控为了兼容PC而仍把它们自己伪装成旋转的磁盘，这一点最终会导致瓶颈
the controllers that pretend that they're still spinning discs for the pc's sake quickly become the bottleneck

89
00:06:12,576 --> 00:06:15,420
让我们看看一套完整的系统是如何工作的吧
let's meet a complete system and see it at work

90
00:06:15,420 --> 00:06:16,560


91
00:06:16,560 --> 00:06:22,639
这是一台FlashBlade//S，PureStorage的最新产品
this is a FlashBlade//S chassis pure storage's newest product each of these

92
00:06:22,639 --> 00:06:29,680
每一台 FlashBlade//S 可以容纳 10 个刀片，每个刀片有 4 个 DFM，每个 DFM 高达容量 48 TB
can hold 10 blades with 4 dfm's each  which at up to 48 terabytes per dfm is a

93
00:06:29,680 --> 00:06:37,520
在仅仅5U的高度中放下了惊人的 1.9 PB 存储
staggering 1.9 petabytes of storage in a single 5u chassis

94
00:06:37,520 --> 00:06:41,759
还记得我们装下 1PB 的硬盘的机箱有多长吗？
remember the lengths we had to go to in order to get a petabyte of hard drives

95
00:06:41,759 --> 00:06:45,199
还记得1PB的闪存装了多少个箱子吗？
and then how many boxes a petabyte of flash took up

96
00:06:45,199 --> 00:06:47,520
和这个比，简直不是一个级别的
this is next level

97
00:06:47,520 --> 00:06:51,120
这台服务器上有四个模块化电源
there are four power supplies on this thing that are all modular each with the

98
00:06:51,120 --> 00:06:55,188
每个都能提供 2.4kw的电力
capability of drawing 2.4 kilowatts from the wall

99
00:06:55,212 --> 00:07:01,588
虽然目前这个计划还没有上市，但根据描述，有一套配置是由10 台这样的服务器所组成的机柜
 and while they don't sell them right now multi-chassis configs with up  to 10 of these things in a rack are in the pipeline

100
00:07:01,612 --> 00:07:07,840
一套完整的FlashBlade//S 有足够的冗余
a fully loaded FlashBlade//S has enough redundancy that it can lose a

101
00:07:07,840 --> 00:07:11,501
它最高可以允许下线一整个刀片服务器，以及另一台刀片上的一个DFM
whole blade and a dfm and another blade

102
00:07:11,525 --> 00:07:13,420
与此同时，功能不受影响
and be totally fine

103
00:07:13,444 --> 00:07:21,280
刀片们通过fabricIO模块(FIOMs) 互联
the blades connect to each other via the same backplane that the blades slot into called fabric i o modules or fioms for short each

104
00:07:21,280 --> 00:07:26,235
FlashBlade//S 有两个FIOMs 可以自动管理刀片和刀箱
FlashBlade//S has two FIOMs which automates managing the blades and chassis units

105
00:07:26,259 --> 00:07:30,375
共有八个100 Gbps 的链路
with a total of eight  100 gigabit per second links

106
00:07:30,399 --> 00:07:32,960
虽然目前仅能使用其中四个
only four of which are currently used

107
00:07:32,960 --> 00:07:38,319
他们说，如果这项功能将来做好了，它会通过软件更新免费启用
they say that when they're ready to enable the others they'll be able to do it for free via a software update

108
00:07:38,319 --> 00:07:45,861
得益于他们的“常青订阅模式”。总结来说，在这个模式下，他们不通过收费解锁软件新功能
something they're able to do thanks to their evergreen model there's a lot to this but basically they don't charge for new software features

109
00:07:45,885 --> 00:07:51,680
并且由于他们对硬件的模块化设计，意味着你可以不断升级
and their modular approach to hardware means that you can continuously upgrade to the point where

110
00:07:51,680 --> 00:08:01,001
即使是10 多年前的硬件也可以在不停机的情况下，升级到最新的甚至是alpha版本
one of their alpha stage clients from 10 years ago has continuously upgraded their array with no downtime to this very day

111
00:08:01,025 --> 00:08:03,120
它就像忒修斯的阵列一样 （忒修斯悖论）
it's like the array of theseus

112
00:08:03,120 --> 00:08:05,280
除了数据之外没有一部分是原来的
 none of it is still the same except for the data

113
00:08:05,280 --> 00:08:07,840
甚至连数据也会有变化
and even that might be different now

114
00:08:07,840 --> 00:08:12,720
废话说够了，让我们看看它们在数据中心里咆哮的样子
but enough talk let's see them roar in the data center

115
00:08:12,720 --> 00:08:18,627
这个机架里面装满了我们刚刚看到的那台的上一代
this is a rack full of the previous generation versions of what we were just looking at a little while ago

116
00:08:18,651 --> 00:08:21,286
它们都被连在了一起
these are all connected together

117
00:08:21,310 --> 00:08:24,321
而且使用了全光纤进行互联
with a fabric like this i think all fiber

118
00:08:24,345 --> 00:08:28,240
它们全通过背板连接到了这里
and they're all connected via these backplanes here

119
00:08:28,240 --> 00:08:32,908
上面那块连接所有粉色的线缆
so this top one here is connected to all of the pink cables

120
00:08:32,932 --> 00:08:37,360
下面连接的大部分是蓝色的，也有一部分是粉色的
and this bottom one is connected to mostly glue there's some pink here as well

121
00:08:37,360 --> 00:08:40,961
所有机器都以最大的布局相互通信，所以这个
and all of these are communicating with each other in a maximum layout

122
00:08:40,986 --> 00:08:42,719
这一整个机架
so this whole rack

123
00:08:42,719 --> 00:08:45,920
基本上就像一个单一的ssd
is acting as basically a single ssd

124
00:08:45,920 --> 00:08:48,959
你可以看到，所有这些电源
as you can see all of these power connectors

125
00:08:48,959 --> 00:08:49,960
都是模块化的
are modular

126
00:08:49,984 --> 00:08:54,640
电源线本身有标签
the actual power cables themselves have tabs on them

127
00:08:54,640 --> 00:08:56,166
所以你不能把它们拉出来
so you can't pull them out

128
00:08:56,190 --> 00:08:58,438
是的，这是他们上一代的东西
so yeah this is all of their last gen stuff

129
00:08:58,462 --> 00:09:01,440
是个机柜里的是他们新一代的产品
this over here is a rack full of their new gen stuff

130
00:09:01,440 --> 00:09:03,680
这是 FlashBlade//S
this is FlashBlade//S

131
00:09:03,680 --> 00:09:06,560
我们在这里看到的
what we're looking at here is

132
00:09:06,560 --> 00:09:10,320
大多是一套独立的单元
more or less a setup of a bunch of standalone units

133
00:09:10,320 --> 00:09:14,128
而不是构成一整个巨大的阵列
rather than having everything built together into one giant array

134
00:09:14,152 --> 00:09:16,640
也就是说，它们每台服务器都是一个小型的阵列
each one of these is a smaller array

135
00:09:16,640 --> 00:09:18,548
和磁盘相比
compared to spinning disks

136
00:09:18,572 --> 00:09:21,680
它有着相当不错的功率密度
this is actually pretty good power density

137
00:09:21,680 --> 00:09:22,800
想象一下
like

138
00:09:22,800 --> 00:09:26,720
那么巨量的存储容量
for the amount of storage you're actually getting here

139
00:09:26,720 --> 00:09:30,000
它节约了很多电力消耗
it's a significant saving but it's something

140
00:09:30,000 --> 00:09:33,228
每TB大概只需要消耗1.3w
like 1.3 watts per terabyte or something like that

141
00:09:33,252 --> 00:09:38,480
这是他们造出来的第一批模块之一
this is one of the first modules that they actually built for this type

142
00:09:38,480 --> 00:09:41,839
上面甚至还有个FPGA
it actually has an fpga on it

143
00:09:41,839 --> 00:09:44,967
从这里的 SD 卡获取所有信息
 that takes all of its information from an sd card here

144
00:09:44,991 --> 00:09:49,360
这是一个mini-USB 口，它告诉了你这块硬盘是多久以前的东西了
and that is a mini usb port that tells you how long ago this was

145
00:09:49,360 --> 00:09:54,688
但是这块盘是NVME协议的，几乎领先于所有同行之前
but this was nvme before pretty much nvme anybody was using nvme

146
00:09:54,712 --> 00:09:57,920
它还使用了U.2 接口
it uses a u.2 connector here

147
00:09:57,920 --> 00:09:59,875
这样能直接连接到背板上去
 to connect directly to the back plate basically

148
00:09:59,899 --> 00:10:03,600
他们为它还定制了一块PCI-E背板
they had to create a pci express backplane for this

149
00:10:03,624 --> 00:10:06,320
因为那个时候
because actual controllers, HBAs

150
00:10:06,344 --> 00:10:09,680
还没有出现可以使用NVME协议的阵列卡和HBA卡
didn't really exist at the time for this kind of story

151
00:10:09,680 --> 00:10:12,160
我手上还有一个
and i was just handed one of these

152
00:10:12,160 --> 00:10:14,621
这是一个无托架的硬盘
this is a trainless version

153
00:10:14,645 --> 00:10:19,760
这就是一块被脱光的DFM it's been taken out of the
tray of the dfm that's currently being used

154
00:10:19,760 --> 00:10:22,399
我们可以看到...
we can see

155
00:10:22,399 --> 00:10:25,815
在这里有几个超级电容
that there are super capacitors on here

156
00:10:25,839 --> 00:10:30,687
为了确保意外情况下
in order to make sure that in case uh say for example one of these were

157
00:10:30,711 --> 00:10:33,839
比如意外拔出硬盘时
unceremoniously yanked out of the server

158
00:10:33,839 --> 00:10:38,079
服务器写入的任何数据都被正确写入
any data that was already being written will be written

159
00:10:38,079 --> 00:10:42,399
所以它不会导致部分写入失败，亦或者被打断
so it won't be partially written you won't get corruption in that way

160
00:10:42,399 --> 00:10:47,279
背面则是更多的nand 闪存颗粒
also on the back we can see here that we have extra man flash chips

161
00:10:47,279 --> 00:10:51,800
这是个48TB模块
this is a 48 terabyte module

162
00:10:51,800 --> 00:10:53,600
48！！

163
00:10:53,600 --> 00:10:56,560
这是非常巨大的存储空间
that is a massive amount of storage

164
00:10:56,560 --> 00:11:00,959
机械硬盘在接下来的一段时间内不可能跟得上它的容量
hard drive could possibly even come close to this within the next

165
00:11:00,959 --> 00:11:04,528
我不知道机械硬盘赶上它需要多长时间，根据目前机械硬盘容量增长的速度
i don't know how long it would take because currently at the rate of growth

166
00:11:04,552 --> 00:11:08,079
达到那么多容量可能还需要 10 年甚至更长的时间
for hard drives it would probably be another 10 years or so

167
00:11:08,079 --> 00:11:12,320
我们的假设还是建立在机械硬盘的增长和时间节点图保持一致的前提下
assuming hard drives are still relevant at that point in time

168
00:11:12,320 --> 00:11:15,839
这是PureStorage试图避免的事情
which is something that PureStorage is trying to actually avoid

169
00:11:15,839 --> 00:11:21,200
他们认为闪存本质上优于机械硬盘
they feel that flash storage is inherently superior to spinning disks

170
00:11:21,200 --> 00:11:25,839
坦率地说，从我目前观察到的情况来看，确实是这样的
and quite frankly from what i've seen so far it definitely kind of looks like it

171
00:11:25,839 --> 00:11:30,800
通过闪存，你能得到更高的密度、更低的功耗
you get better density better power draw

172
00:11:30,800 --> 00:11:35,641
以及获得更底层的掌控权
and you get a much much lower level ability to

173
00:11:35,665 --> 00:11:39,040
来管理驱动器上的数据
like just manage the data on the drive

174
00:11:39,040 --> 00:11:42,399
这是它相对于传统硬盘的优势
than you would get from a traditional type of hard drive

175
00:11:42,399 --> 00:11:47,120
你可能会问：“谁需要这么多的存储空间？”
Now you may always be asking yourself who could possibly need this much storage

176
00:11:47,120 --> 00:11:52,548
答案是...嗷...这里有导轨啥的
well the answer al there's rails and stuff here so oh this this is great

177
00:11:52,572 --> 00:11:56,000
答案是，任何从事深度学习的人都需要用到
so the answer is anybody who's into deep learning so like

178
00:11:56,000 --> 00:11:59,440
这是NVidia DGX
this is an nvidia DGX

179
00:11:59,440 --> 00:12:03,821
这也是PureStorage 与NVidia 合作的事情之一
this is one of the things that pure storage is actually partnered with nvidia for

180
00:12:03,845 --> 00:12:08,620
Meta 最近也和PureStorage合作
uh meta recently partnered with PureStorage

181
00:12:08,644 --> 00:12:13,040
当然也有NVidia吧，他们一起为AI 打造深度学习平台
and i think also nvidia for their AI uh deep learning platform

182
00:12:13,040 --> 00:12:15,519
DGX 作为算力大脑
 so the DGX is powering the brains whereas

183
00:12:15,519 --> 00:12:22,800
而PureStorage提供计算所需的数据集的存储
pure storage is powering all of  the data sets that they need to crunch through so

184
00:12:22,800 --> 00:12:30,000
因此，你才不会发现有1PB显存的GPU。 至少最近纪念不会有
you're never going to get a gpu with petabytes of video memory at least not in the next

185
00:12:30,000 --> 00:12:33,680
也许最近几十年都不会出现吧
uh i don't know several decades at least

186
00:12:33,680 --> 00:12:38,440
因此我们这里看到的是一台足够快，能快到跟上
so what we're looking at here is an array that's fast enough to keep up

187
00:12:38,464 --> 00:12:42,495
深度学习工作负载的阵列，能够持续地供给它们数据集
with those deep learning workloads on those gpus to keep them fed

188
00:12:42,519 --> 00:12:45,600
这样，它们才能更频繁地去做他们的工作
so that they can actually be doing their job more often

189
00:12:45,600 --> 00:12:48,661
否则你就需要大量内存
otherwise what you would need is a massive amount of memory

190
00:12:48,685 --> 00:12:50,773
来让系统缓存这些数据
for the system to cache that kind of thing

191
00:12:50,797 --> 00:12:52,360
这是不切实际的
which is just impractical

192
00:12:52,384 --> 00:12:56,025
现在通过闪存颗粒就能完成这项工作
so here we have nand flash doing that exact job

193
00:12:56,049 --> 00:13:00,480
响应迅速且密度极高
it is very responsive and very dense

194
00:13:00,480 --> 00:13:03,839
因此出于这些原因
so for those reasons basically like

195
00:13:03,839 --> 00:13:06,160
如果你真的有深度学习要去做
if you have a really deep learning

196
00:13:06,160 --> 00:13:11,200
据我所知，这是目前最高端的解决方案了
 workload this is pretty much the premiere solution right now as far as i can tell

197
00:13:11,200 --> 00:13:13,648
NVidia 和PureStorage 也都这么认为
both nvidia and pure storage need to think so

198
00:13:13,672 --> 00:13:18,800
现在我们看到的这台是正在运行的 NVidia DGX A100
we're looking at here is an example of an nvidia dgx a100 in action

199
00:13:18,800 --> 00:13:25,295
目前它正在处理深度学习数据。数据通过这些100Gbps的链路
right now this is actually computing deep learning data and it's connected via 100Gbps

200
00:13:25,319 --> 00:13:28,320
经过这些交换机
links through these switches here

201
00:13:28,320 --> 00:13:31,547
来到PureStorage的阵列中
to the PureStorage arrays

202
00:13:31,571 --> 00:13:34,672
这一台是上一代的FlashBlade
so there's the previous generation flashblades

203
00:13:34,696 --> 00:13:38,848
那边应该还有一台新一代的FlashBlade//S
and i believe there's also a flashblade s there as well which is the current generation

204
00:13:38,872 --> 00:13:43,034
他们正在对它做性能测试，看看哪个更快
i think they're doing performance testing on those right now to see which is faster

205
00:13:43,058 --> 00:13:46,839
并搞清如何为这些工作负载进行调优
and how to you know how to basically optimize for these workloads

206
00:13:47,552 --> 00:13:51,388
这真是太离谱了
it's pretty amazing that we're basically at a point

207
00:13:51,412 --> 00:13:54,581
我们所处的困境是 SSD 不够快
where ssds aren't fast enough and yet the ssds

208
00:13:54,605 --> 00:13:59,575
但是替换它们的替代品理论上的速度更慢！因为它们使用的是 QLC 颗粒
 they're replacing them with are technically slower because they're using qlc

209
00:13:59,599 --> 00:14:03,360
而不是TLC 颗粒。真是令人难以置信的
memory instead tlc of tlc which is just mind-boggling

210
00:14:03,360 --> 00:14:05,279
QLC 应该比旧的颗粒慢一个数量级
it's supposed to be an order of magnitude

211
00:14:05,279 --> 00:14:06,880
同时效率更低，但他们居然让它变得更快了...
less efficient and yet they're making it work

212
00:14:06,880 --> 00:14:09,355
你可能会想
 now you might be thinking to yourself

213
00:14:09,379 --> 00:14:12,740
“这些服务器都是完整的计算机”
these are full computers in these blades and server chassis

214
00:14:12,764 --> 00:14:16,320
“只是被用在了SSD 阵列中”
that are basically just being used as ssd arrays

215
00:14:16,320 --> 00:14:20,081
“这些全闪阵列下架之后会发生什么？”
like what happens after the ssd array is retired

216
00:14:20,105 --> 00:14:22,800
“你不需要它或者你升级到新款之后 ”
like when you no longer need it or whether you upgrade to a new one is

217
00:14:22,800 --> 00:14:25,448
“只能把这些机器都扔掉吗？”
the whole chassis that's kind of thrown out

218
00:14:25,472 --> 00:14:29,521
不会有这样的事情发生！PureStorage 在干一件事
well no what your storage is doing is they have a whole bunch

219
00:14:29,545 --> 00:14:34,160
这里有一大堆空机器
of completely empty chassis here running

220
00:14:34,160 --> 00:14:36,639
正在运行虚拟机以及其他工作
virtual machines and other workloads

221
00:14:36,639 --> 00:14:39,608
这些工作并不需要那种存储，因此他们重新利用
that don't require that kind of storage so they're repurposing

222
00:14:39,632 --> 00:14:43,600
那些机器上的Xeon处理器
those xeon processors that would otherwise just be

223
00:14:43,600 --> 00:14:46,207
不然的话...你是怎么对待你的退役SSD的？
i don't know like if you if you retired an SSD

224
00:14:46,231 --> 00:14:48,560
把它们丢在一边
and put it on your shelf, what does that make it

225
00:14:48,560 --> 00:14:49,600
然后呢？
you know

226
00:14:49,600 --> 00:14:58,968
在这里，即使服务器里面的闪存颗粒已经坏了，或者升级了，这些服务器依旧可以运行
so in this case these live on even if the flash has died or it's been upgraded because it was too uh smalling capacity

227
00:14:58,992 --> 00:15:03,588
实际上，这里有一大堆处理器和内存等等其他东西
and in fact behind you there are a whole bunch of processors

228
00:15:03,612 --> 00:15:07,220
丢在那里
and ram and other stuff that's just sitting there

229
00:15:07,244 --> 00:15:10,399
等待测试以及重复使用
waiting to be tested or reused

230
00:15:10,399 --> 00:15:14,959
现在你可能想知道，如何与这些服务器交互
now you'll be wondering how you even managed to like talk to these things

231
00:15:14,959 --> 00:15:20,160
是这样的，他们使用的“文件系统”，其实“文件系统”这个词并不是非常贴切
well the file system that they use i say file system very loosely it's actually

232
00:15:20,160 --> 00:15:24,160
它更像是一个数据库
more like a database that you can actually then create

233
00:15:24,160 --> 00:15:27,120
你可以创建很多他们称之为 “authorities” 的东西
uh what they call uh authorities

234
00:15:27,120 --> 00:15:31,361
最高可以有128个authorities 分布在整个阵列上
on top of it with 128 of them split across the entire array

235
00:15:31,385 --> 00:15:34,061
阵列越大，它们的速度越快
the larger the array is the faster they go

236
00:15:34,085 --> 00:15:40,079
这些authorities 可用于创建对象存储，比如 亚马逊 S3
all of those authorities can be used to do things like create object stores like amazon s3

237
00:15:40,079 --> 00:15:43,279
也可以创建SMB
and from there you can also create smb

238
00:15:43,279 --> 00:15:46,320
比如samba、windows文件共享
so samba, windows file sharing

239
00:15:46,320 --> 00:15:50,160
或者NFS，来给Linux 提供文件共享支持
or nfs for linux file sharing support

240
00:15:50,160 --> 00:15:54,167
所以对于终端用户来说，它们用起来和普通方案没什么区别
so pretty much it doesn't look any different to the end user

241
00:15:54,191 --> 00:15:58,079
你想怎么用就怎么用
you can use it however you feel like you need to use your data so

242
00:15:58,079 --> 00:16:01,855
你可以从亚马逊之类的云服务提供商那里下载数据
you can pull stuff directly down through amazon for your cloud services deployments

243
00:16:01,879 --> 00:16:05,675
如果你真的想的话，大可以把它直接当作NAS来用
or you can just use it as network storage if that's what you really want

244
00:16:05,699 --> 00:16:07,759
还有一个特别酷的东西
 and what's really cool they

245
00:16:07,759 --> 00:16:10,160
他们可能不会让我这样做
probably wouldn't let me do it

246
00:16:10,160 --> 00:16:15,519
如果你取出一个 DFM 并重新在任意地方插回去
but if you take out one of the dfms uh and like rearrange it or something

247
00:16:15,519 --> 00:16:20,079
不用干任何其他操作，在 10 分钟内它会立即恢复
within 10 minutes it picks right back up without having to do anything special

248
00:16:20,079 --> 00:16:23,000
只要你把它插回去，就无事发生一样
just you slot it back in and it's like nothing happened

249
00:16:23,024 --> 00:16:27,601
比如有一个刀片出了点问题
so you can say for example if you've got a blade that's misbehaving

250
00:16:27,625 --> 00:16:29,199
或者你想要升级这台刀片
 or you want to upgrade it

251
00:16:29,199 --> 00:16:30,800
你可以完整地进行迁移
you can completely migrate over

252
00:16:30,824 --> 00:16:33,808
无需更改任何配置
without having to change anything about your configuration

253
00:16:33,832 --> 00:16:36,580
用户不会知道发生了什么事情
your users basically won't know what happened

254
00:16:36,604 --> 00:16:38,880
因为确实什么也没发生
because nothing will have happened

255
00:16:38,880 --> 00:16:40,959
像是变魔术一样
it's it's kind of magic

256
00:16:40,959 --> 00:16:44,160
这里真的很暖和
it's really really warm back here but

257
00:16:44,160 --> 00:16:48,800
让我们看看这些交换机，也就是之前看过的那两台连接所有机器的交换机
these switches we were looking at earlier with all of these chassis plugged in

258
00:16:48,800 --> 00:16:49,735
这是其中之一。
this is one of them

259
00:16:49,759 --> 00:16:52,560
这不仅是网络交换机
not only is this a network switch

260
00:16:52,560 --> 00:17:00,079
它也是一台和 FlashBlade//S 背后的 FIOM 类似的东西
but it's also basically the same type of thing you find in the FIOMs in the back of a FlashBlade//S

261
00:17:00,079 --> 00:17:05,359
所以里面有一个 x86 处理器，用来处理多个FlashBlade//S之间的通信
so it's got an x86 processor in here that handles all of the communications

262
00:17:05,359 --> 00:17:09,199
其实，当你给这台交换机上连接上多台FlashBlade时
and in fact when you plug in multiple FlashBlade chassis

263
00:17:09,199 --> 00:17:13,919
它会接管它们，并是他们能够协同工作
this thing takes over and actually orchestrates the entire lot of them

264
00:17:13,919 --> 00:17:17,215
它们不会再单独组成阵列
so they're no longer doing their own individual arrays

265
00:17:17,239 --> 00:17:20,480
这台交换机会主动接过大旗
this thing takes over automatically

266
00:17:20,480 --> 00:17:22,160
此外
also

267
00:17:22,160 --> 00:17:26,474
这些端口中的每个都能以 40Gbps 或者 100Gbps 的速度传输数据
each one of these ports can do 40Gbps or 100Gbps

268
00:17:26,498 --> 00:17:28,286
速度取决于FlashBlade 刀箱
depending on the FlashBalde chassis

269
00:17:28,310 --> 00:17:30,341
老型号只支持40G
the older models could always be 40

270
00:17:30,365 --> 00:17:35,360
新型号可以到 100G
whereas the newer model flash plate s that can do 100

271
00:17:35,360 --> 00:17:40,640
这台交换机会流经海量的数据
so it's a massive amount of data that will flow between this thing and

272
00:17:40,640 --> 00:17:41,841
从而到达机架的其他部分
the rest of the rack

273
00:17:41,865 --> 00:17:45,406
看完了这些科技让我们看看这些人是谁吧
now that you've seen the tech let's talk about who these guys even are

274
00:17:45,906 --> 00:17:49,452
PureStorage 静悄悄地在2009年成立了
 pure storage was founded in stealth mode back in 2009 and debuted in

275
00:17:49,492 --> 00:17:55,679
2011年，他们成为业内首批引入全闪存储的企业
2011 as one of the first companies to introduce all flash infrastructure solutions in the industry

276
00:17:55,679 --> 00:17:59,679
早期他们使用消费级SSD，效果嘛...
in the early days they used consumer grade ssds which

277
00:17:59,679 --> 00:18:03,852
如果你回顾一下当时的SSD 评测，那真是...惨不忍睹
if you look back on the state of ssds back then was pretty ballsy

278
00:18:04,124 --> 00:18:07,224
但整套解决方案始终由软件驱动
but the solution was always software driven

279
00:18:07,317 --> 00:18:10,559
他们很快开始开发自己的闪存模块
 and they quickly began developing their own flash modules

280
00:18:10,559 --> 00:18:15,087
它于 2015 年开始发货。快进到今天
which started shipping in 2015. fast forward to today

281
00:18:15,111 --> 00:18:19,548
他们与思科和英伟达等公司合作，客户遍布全球
and they partnered with companies like cisco and nvidia with clients
across the globe

282
00:18:19,572 --> 00:18:24,000
非常感谢PureStorage对这条视频的赞助，并允许我们炫一波他们的设备
so big thanks to pure storage for sponsoring this video and letting us show off their gear

283
00:18:24,000 --> 00:18:30,226
如果你是个行动派想自己来部署一套，或者是个IT 经理
you can learn more and maybe deploy one of these for yourselves if you're a straight baller or if you're an i.t manager

284
00:18:30,280 --> 00:18:32,000
看看下面不存在的链接来了解更多
at the links below thanks for

285
00:18:32,000 --> 00:18:38,000
谢谢谢谢谢谢谢谢谢谢谢谢谢谢谢谢谢谢谢谢

286
00:18:38,000 --> 00:18:52,480
关注原作者 @LinusTechTips ！！！

